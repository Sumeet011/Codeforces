#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    long long t;
    cin >> t; // Number of test cases

    while (t--) {
        long long n, l, r;
        cin >> n >> l >> r; // Length of array, and range [l, r]
        vector<long long> Left;
        vector<long long> Mid;
        vector<long long> Right;

        for (long long i = 0; i < n; ++i) {
            long long A;
            cin >> A;
            if (i < l - 1) {
                Left.push_back(A);
            } else if (i >= l - 1 && i < r) {
                Mid.push_back(A);
            } else {
                Right.push_back(A);
            }
        }

        sort(Left.begin(), Left.end());
        sort(Mid.begin(), Mid.end());
        sort(Right.begin(), Right.end());

        long long Ans = LLONG_MAX;

        // Calculate cost using Left and Mid
        long long c1 = 0;
        long long S1 = 0;
        long long L1 = 0;
        long long L2 = 0;
        while (S1 < r - l + 1) {
            if (L1 < Left.size() && (L2 >= Mid.size() || Left[L1] < Mid[L2])) {
                c1 += Left[L1];
                L1++;
            } else {
                c1 += Mid[L2];
                L2++;
            }
            S1++;
        }
        Ans = min(Ans, c1);

        // Calculate cost using Right and Mid
        long long c2 = 0;
        long long S2 = 0;
        L1 = 0;
        L2 = 0;
        while (S2 < r - l + 1) {
            if (L1 < Right.size() && (L2 >= Mid.size() || Right[L1] < Mid[L2])) {
                c2 += Right[L1];
                L1++;
            } else {
                c2 += Mid[L2];
                L2++;
            }
            S2++;
        }
        Ans = min(Ans, c2);

        cout << Ans << endl;
    }

    return 0;
}
